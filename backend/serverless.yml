service:
  name: cardboard-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  # - serverless-reqvalidator-plugin
  # - serverless-offline
provider:
  name: aws
  runtime: nodejs10.x
  profile: serverless
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    BOXES_TABLE: Boxes-${self:provider.stage}
    INDEX_NAME: BoxesIndex
    SIGNED_URL_EXPIRATION: 300
    IMAGES_S3_BUCKET: aaltheiab-serverless-capstone-${self:provider.stage}
    

custom:
  serverless-offline:
    port: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

functions:

  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler

  GetBoxes:
    handler: src/lambda/http/getBoxes.handler
    events:
      - http:
          method: get
          path: boxes
          cors: true
          # authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOXES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOXES_TABLE}/index/${self:provider.environment.INDEX_NAME}

  CreateBox:
    handler: src/lambda/http/createBox.handler
    events:
      - http:
          method: post
          path: boxes
          cors: true
          # authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schema:
              application/json: ${file(validators/create-box-request.json)}
          # documentation:
          #   summary: Create a new image
          #   description: Create a new image
          #   requestModels:
          #     'application/json': CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOXES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOXES_TABLE}/${self:provider.environment.INDEX_NAME}

  UpdateBox:
    handler: src/lambda/http/updateBox.handler
    events:
      - http:
          method: patch
          path: boxes/{sku}
          cors: true
          # authorizer: Auth
          request:
            schema:
              application/json: ${file(validators/update-box-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOXES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOXES_TABLE}/${self:provider.environment.INDEX_NAME}

  
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         cors: true
  #         method: post
  #         path: todos/{todoId}/attachment
  #         authorizer: Auth
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - s3:PutObject
  #         - s3:GetObject
  #       Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:UpdateItem
  #         - dynamodb:GetItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:UpdateItem
  #         - dynamodb:GetItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/${self:provider.environment.INDEX_NAME}

resources:
  Resources:
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    BoxesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: sku
            AttributeType: S
          # - AttributeName: length
          #   AttributeType: N
          # - AttributeName: width
          #   AttributeType: N
          # - AttributeName: height
          #   AttributeType: N
          
        KeySchema:
          - AttributeName: sku
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOXES_TABLE}
        # GlobalSecondaryIndexes:
          # - IndexName: length-${self:provider.environment.INDEX_NAME}
          #   KeySchema:
          #     - AttributeName: length
          #       KeyType: HASH
          #   Projection:
          #     ProjectionType: KEYS_ONLY 
          # - IndexName: height-${self:provider.environment.INDEX_NAME}
          #   KeySchema:
          #     - AttributeName: height
          #       KeyType: HASH
          #   Projection:
          #     ProjectionType: KEYS_ONLY 
          # - IndexName: ${self:provider.environment.INDEX_NAME}
          #   KeySchema:
          #     - AttributeName: width
          #       KeyType: HASH
          #   Projection:
          #     ProjectionType: KEYS_ONLY 
        

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000  
 
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket         
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false